# This workflow will install Python dependencies, run tests and lint with a variety of Python versions
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-python-with-github-actions

name: MuPIF

on:
  push:
    branches: [ "**" ]
  pull_request:
    branches: [ "**" ]

jobs:
  test-linux:
    runs-on: ubuntu-22.04
    strategy:
      fail-fast: false
      matrix:
        # needs quotes so that float 3.10 does not get interpreted as 3.1
        python-version: [ '3.10', '3.11', '3.12' ]
      # max-parallel: 1 # avoid localhost conflicts
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        sudo apt-get update && sudo apt-get install python3-wheel python3-pip dos2unix
        python -m pip install -q codecov flake8
        pip install -q -r requirements.txt
        python3 -m pip install 'vtk>=9.2.0'
    - name: Lint with flake8
      run: |
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics --exclude=obsolete
        # this is too verbose and is mostly just coding style
        # exit-zero treats all errors as warnings. The GitHub editor is 127 chars wide
        # flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics --exclude=obsolete
    - name: pytest (native)
      timeout-minutes: 2
      run: |
        set -euo pipefail
        python -m pytest --durations=10 -v --cov=./ --cov-report=xml mupif/tests 2>&1 | tools/grcat-mupif
        codecov -F unittests
    - name: examples (native)
      timeout-minutes: 2 # normally about 35s
      run: |
        set -euo pipefail
        cd examples; ./runex.py --codecov 2>&1 | ../tools/grcat-mupif

#  test-wine64:
#    runs-on: ubuntu-20.04
#    strategy:
#      matrix:
#        python-version: [3.8]
#    steps:
#    - uses: actions/checkout@v4
#    - name: Set up Python ${{ matrix.python-version }}
#      uses: actions/setup-python@v4
#      with:
#        python-version: ${{ matrix.python-version }}
#    - name: Install dependencies
#      run: |
#        sudo apt-get update && sudo apt-get install wine64 wine python3-pip dos2unix
#        python -m pip install wenv
#        echo '{"arch":"win64","pythonversion":"3.8.5"}' > ~/.wenv.json
#        wenv init
#        wenv pip install --only-binary=pyrsistent -r requirements.txt
#    - name: unit tests
#      timeout-minutes: 1
#      run: |
#        set -euo pipefail
#        # wenv python -m nose -v --rednose --traverse-namespace 2>&1 | dos2unix | tools/grcat-mupif
#        wenv python -m pytest -v mupif/tests 2>&1 | dos2unix | tools/grcat-mupif
#    - name: examples
#      timeout-minutes: 2 # normally about 50s
#      run: |
#        set -euo pipefail
#        # skip tests 4 and 7, somehow fail under wine
#        cd examples; wenv python runex.py 1 2 3 5 6 8 2>&1 | dos2unix | ../tools/grcat-mupif

  test-docker-VPN:
    runs-on: ubuntu-22.04
    strategy:
      matrix:
        python-version: [ '3.11' ]
    steps:
    - uses: actions/checkout@v4
    # this should somehow enable persistent docker layer cache
    # so that we don't have to build the full image from scratch (ubuntu:20.04)
    # every time
    # see https://github.com/marketplace/actions/docker-layer-caching
    - uses: jpribyl/action-docker-layer-caching@v0.1.1
      continue-on-error: true
    - name: Distributed example on Docker containers in VPN
      run: |
        # free up some space: https://github.com/satackey/action-docker-layer-caching/issues/1392
        # should avoid "no space left on device"
        rm -rf /usr/local/android /usr/share/dotnet /usr/local/share/boost /opt/ghc
        make -C tools/vpn/wireguard default

  test-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [ '3.11' ]
      max-parallel: 1
    steps:
    - uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Install dependencies
      run: |
        python3 -m pip install wheel
        python3 -m pip install -r requirements.txt
        python3 -m pip install 'vtk>=9.2.0'
    - name: unit tests
      timeout-minutes: 2
      # --traverse-namespace necessary for windows, see https://github.com/Pyomo/pyomo/issues/1257
      run: python3 -m pytest -v mupif/tests
      # 2>&1 | python3 -u tools/grcat-mupif
    - name: examples
      timeout-minutes: 2
      run: python3 examples/runex.py
      # 2>&1 | python3 -u ../tools/grcat-mupif


